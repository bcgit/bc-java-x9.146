
plugins {
  id "biz.aQute.bnd.builder" version "7.0.0"
}

jar.archiveBaseName = "bctls-$vmrange"

sourceSets {
    main {
         java {
            srcDirs = ['src/main/java', 'src/main/jdk1.5']
         }
    }

    java9 {
        java {
            srcDirs = ['src/main/jdk1.9']
        }
    }

    test11 {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += test.output
            srcDir(files("src/test/jdk1.11", "src/test/java"))
        }
    }

    test17 {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += test.output
            srcDir(files("src/test/jdk1.11","src/test/jdk1.15", "src/test/java"))
        }
    }

    test21 {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += test.output
            srcDir(files("src/test/jdk1.11","src/test/jdk1.15","src/test/jdk21", "src/test/java"))
        }
    }

}

dependencies {
    implementation project(':core')
    implementation project(':prov')
    implementation project(':util')
    implementation project(':pkix')

    java9Implementation project(':core')
    java9Implementation project(':prov')
    java9Implementation project(':util')
    java9Implementation project(':pkix')
    java9Implementation files(sourceSets.main.output.classesDirs) {
        builtBy compileJava
    }

    test11Implementation group: 'junit', name: 'junit', version: '4.13.2'
    test17Implementation group: 'junit', name: 'junit', version: '4.13.2'
    test21Implementation group: 'junit', name: 'junit', version: '4.13.2'


    test11Implementation project(':core')
    test11Implementation project(':prov')
    test11Implementation project(':util')
    test11Implementation project(':pkix')

    test17Implementation project(':core')
    test17Implementation project(':prov')
    test17Implementation project(':util')
    test17Implementation project(':pkix')

    test21Implementation project(':core')
    test21Implementation project(':prov')
    test21Implementation project(':util')
    test21Implementation project(':pkix')

}

compileJava {
    javaCompiler = javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(17)
    }
    targetCompatibility = 1.8;
    sourceCompatibility = 1.8;
}

compileJava9Java {
    javaCompiler = javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(17)
    }
    sourceCompatibility = 9
    targetCompatibility = 9
    options.compilerArgs += [
            '--module-path', "${bc_prov}${File.pathSeparator}${bc_util}${File.pathSeparator}${bc_pkix}"
    ]

    options.sourcepath = files(['src/main/java', 'src/main/jdk1.9'])
}

compileTest11Java {
    javaCompiler = javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(17)
    }
    sourceCompatibility = 11
    targetCompatibility = 11
    options.sourcepath = files(['src/test/java', 'src/test/jdk1.11'])
}

compileTest17Java {
    javaCompiler = javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(17)
    }
    sourceCompatibility = 17
    targetCompatibility = 17
    options.sourcepath = files(['src/test/java', 'src/test/jdk1.15'])
}

compileTest21Java {
    javaCompiler = javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(21)
    }
    sourceCompatibility = 21
    targetCompatibility = 21
    options.sourcepath = files(['src/test/java', 'src/test/jdk21'])
}



task sourcesJar(type: Jar) {
    archiveBaseName = jar.archiveBaseName
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
    exclude("**/*.so")
    into('META-INF/versions/9') {
        from sourceSets.java9.allSource
    }
}

jar {
    from sourceSets.main.output
    into('META-INF/versions/9') {
        from sourceSets.java9.output
    }
    String v = "${rootProject.extensions.ext.bundle_version}"
    manifest.attributes('Multi-Release': 'true')
    manifest.attributes('Bundle-Name': 'bctls')
    manifest.attributes('Bundle-SymbolicName': 'bctls')
    manifest.attributes('Bundle-RequiredExecutionEnvironment': 'JavaSE-1.8')
    manifest.attributes('Export-Package': "org.bouncycastle.{jsse|tls}.*;version=${v}")
    manifest.attributes('Import-Package': "java.*;resolution:=optional,javax.*;resolution:=optional,!org.bouncycastle.{jsse|tls}.*,org.bouncycastle.*;version=\"[${v},${maxVersion})\"")
    manifest.attributes('Bundle-Version': "${v}")
}


task javadocJar(type: Jar, dependsOn: javadoc) {
  archiveBaseName = jar.archiveBaseName
  archiveClassifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

test {
    jvmArgs = ['-Dtest.java.version.prefix=1.8']
}


task test11(type: Test) {

    dependsOn(jar)

    testClassesDirs = sourceSets.test11.output.classesDirs
    classpath = sourceSets.test11.runtimeClasspath + files(jar.archiveFile)

    forkEvery = 1;
    maxParallelForks = 8;

    systemProperty 'bc.test.data.home', bcTestDataHome
    maxHeapSize = "1536m"
    testLogging.showStandardStreams = true

    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(11)
    }

    jvmArgs = ['-Dtest.java.version.prefix=11.']


    finalizedBy jacocoTestReport

    filter {
        includeTestsMatching "AllTest*"
        if (project.hasProperty('excludeTests')) {
            excludeTestsMatching "${excludeTests}"
        }
    }
}

task test17(type: Test) {

    // This is testing the 1.15 code base

    dependsOn jar

    testClassesDirs = sourceSets.test17.output.classesDirs
    classpath = sourceSets.test17.runtimeClasspath + files(jar.archiveFile)

    forkEvery = 1;
    maxParallelForks = 8;

    systemProperty 'bc.test.data.home', bcTestDataHome
    maxHeapSize = "1536m"
    testLogging.showStandardStreams = true

    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(17)
    }

    jvmArgs = ['-Dtest.java.version.prefix=17.']


    finalizedBy jacocoTestReport

    filter {
        includeTestsMatching "AllTest*"
        if (project.hasProperty('excludeTests')) {
            excludeTestsMatching "${excludeTests}"
        }
    }
}

task test21(type: Test) {

    // This is testing the 21 code base

    dependsOn jar

    testClassesDirs = sourceSets.test21.output.classesDirs
    classpath = sourceSets.test21.runtimeClasspath + files(jar.archiveFile)

    forkEvery = 1;
    maxParallelForks = 8;

    systemProperty 'bc.test.data.home', bcTestDataHome
    maxHeapSize = "1536m"
    testLogging.showStandardStreams = true

    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(21)
    }

    jvmArgs = ['-Dtest.java.version.prefix=21']


    finalizedBy jacocoTestReport

    filter {
        includeTestsMatching "AllTest*"
        if (project.hasProperty('excludeTests')) {
            excludeTestsMatching "${excludeTests}"
        }
    }
}
